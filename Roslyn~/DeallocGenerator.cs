using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace DnDev.Roslyn
{
    [Generator(LanguageNames.CSharp)]
    public class DeallocGenerator : IIncrementalGenerator
    {
        private const string DeallocApi = "DeallocApiAttribute";
        private const string UnmanagedList = "UnmanagedRefListAttribute";

        private class DeallocInfo
        {
            public string TypeName;
            public string Namespace;
            public string[] Usings = Array.Empty<string>();
            public readonly List<string> Fields = new List<string>();
        }

        public void Initialize(IncrementalGeneratorInitializationContext initCtx)
        {
            var query = initCtx.SyntaxProvider.CreateSyntaxProvider(
                predicate: (node, _) =>
                {
                    if (!(node is StructDeclarationSyntax structDecl))
                        return false;

                    return structDecl.AttributeLists.Contains("DeallocApi");
                },
                transform: (ctx, _) =>
                {
                    var c = (StructDeclarationSyntax)ctx.Node;

                    var t = ctx.SemanticModel.GetDeclaredSymbol((StructDeclarationSyntax)ctx.Node);
                    var result = new DeallocInfo
                    {
                        TypeName = c.Identifier.ValueText,
                    };

                    if (t == null)
                        return result;

                    result.Namespace = t.ContainingNamespace.ToDisplayString();
                    var usings = new HashSet<string>();

                    foreach (var m in t.GetMembers())
                    {
                        if (!(m is IFieldSymbol f) || f.Type.TypeKind != TypeKind.Struct)
                            continue;

                        if (!(f.Type is INamedTypeSymbol ft))
                            continue;

                        if (ft.GetAttributes().Contains(DeallocApi))
                        {
                            result.Fields.Add(f.Name);
                            usings.Add(ft.ContainingNamespace.ToDisplayString());
                        }
                        else if (ft.GetAttributes().Contains(UnmanagedList))
                        {
                            result.Fields.Add(f.Name);
                            usings.Add(ft.ContainingNamespace.ToDisplayString());

                            if (ft.IsGenericOver(DeallocApi, out var genericType))
                                usings.Add(genericType.ContainingNamespace.ToDisplayString());
                        }
                    }

                    usings.Add("DnDev");
                    usings.Remove(result.Namespace);
                    result.Usings = usings.ToArray();

                    Array.Sort(result.Usings);

                    return result;
                }
            );

            var collected = query.Collect();

            initCtx.RegisterSourceOutput(collected, (ctx, entries) =>
            {
                var sb = new StringBuilder();

                foreach (var entry in entries)
                {
                    sb.AppendLine("// Generated by DnDev.RefList.Roslyn");

                    if (entry.Namespace == null)
                    {
                        sb.AppendLine($"#error Failed to get a declared symbol for the `{entry.TypeName}`");
                    }
                    else
                    {
                        foreach (var u in entry.Usings)
                            sb.AppendLine($"using {u};");

                        sb.AppendLine();
                        sb.AppendLine($"namespace {entry.Namespace}");
                        sb.AppendLine("{");
                        sb.AppendLine($"    public static class {entry.TypeName}Dealloc");
                        sb.AppendLine("    {");

                        sb.AppendLine($"        public static void Dealloc(this ref {entry.TypeName} self)");
                        sb.AppendLine("        {");
                        foreach (var f in entry.Fields)
                            sb.AppendLine($"            self.{f}.Dealloc();");
                        sb.AppendLine("        }");

                        foreach (var listType in Templates.RefListTypes)
                            sb.AppendLine(string.Format(Templates.RefListDeallocMethod, listType, entry.TypeName));

                        sb.AppendLine("    }");
                        sb.AppendLine("}");
                    }

                    ctx.AddSource($"{entry.TypeName}Dealloc.g.cs", sb.ToString());
                    sb.Clear();
                }
            });
        }
    }
}