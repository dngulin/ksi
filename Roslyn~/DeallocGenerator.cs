using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ksi.Roslyn.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Ksi.Roslyn
{
    [Generator(LanguageNames.CSharp)]
    public class DeallocGenerator : IIncrementalGenerator
    {
        private class DeallocInfo(string typeName)
        {
            public readonly string TypeName = typeName;
            public string? Namespace;
            public bool IsUnmanaged;
            public string[] Usings = [];
            public readonly List<string> Fields = new List<string>();
        }

        public void Initialize(IncrementalGeneratorInitializationContext initCtx)
        {
            var query = initCtx.SyntaxProvider.CreateSyntaxProvider(
                predicate: (node, _) =>
                {
                    if (node is not StructDeclarationSyntax structDecl)
                        return false;

                    return structDecl.AttributeLists.ContainsDealloc();
                },
                transform: (ctx, _) =>
                {
                    var c = (StructDeclarationSyntax)ctx.Node;

                    var t = ctx.SemanticModel.GetDeclaredSymbol((StructDeclarationSyntax)ctx.Node);
                    var result = new DeallocInfo(c.Identifier.ValueText);

                    if (t == null)
                        return result;

                    result.Namespace = t.ContainingNamespace.ToDisplayString();
                    result.IsUnmanaged = t.IsUnmanagedType;

                    var usings = new HashSet<string>();

                    foreach (var m in t.GetMembers())
                    {
                        if (m is not IFieldSymbol f || f.Type.TypeKind != TypeKind.Struct || f.IsStatic)
                            continue;

                        if (f.Type is not INamedTypeSymbol ft)
                            continue;

                        if (ft.IsDealloc())
                        {
                            result.Fields.Add(f.Name);
                            usings.Add(ft.ContainingNamespace.ToDisplayString());
                        }
                        else if (ft.IsUnmanagedRefList())
                        {
                            result.Fields.Add(f.Name);
                            usings.Add(ft.ContainingNamespace.ToDisplayString());

                            if (ft.TryGetGenericArg(out var gt) && gt!.IsDealloc())
                                usings.Add(gt!.ContainingNamespace.ToDisplayString());
                        }
                    }

                    usings.Add(EmitUtils.RootNamespace);
                    usings.Remove(result.Namespace);
                    result.Usings = usings.ToArray();

                    Array.Sort(result.Usings);

                    return result;
                }
            );

            var collected = query.Collect();

            initCtx.RegisterSourceOutput(collected, (ctx, entries) =>
            {
                var sb = new StringBuilder();

                foreach (var entry in entries)
                {
                    sb.AppendLine("// Generated by Ksi.Roslyn");

                    if (entry.Namespace == null)
                    {
                        sb.AppendLine($"#error Failed to get a declared symbol for the `{entry.TypeName}`");
                    }
                    else
                    {
                        foreach (var u in entry.Usings)
                            sb.AppendLine($"using {u};");

                        sb.AppendLine();
                        sb.AppendLine($"namespace {entry.Namespace}");
                        sb.AppendLine("{");
                        sb.AppendLine($"    public static class {entry.TypeName}Dealloc");
                        sb.AppendLine("    {");

                        EmitDeallocMethod(sb, entry);
                        sb.AppendLine(string.Format(DeallocTemplates.DeallocatedExtension, entry.TypeName));

                        EmitUtils.EmitRefListMethods(
                            DeallocTemplates.RefListDeallocMethods,
                            sb,
                            entry.TypeName,
                            entry.IsUnmanaged
                        );

                        sb.AppendLine("    }");
                        sb.AppendLine("}");
                    }

                    ctx.AddSource($"{entry.TypeName}Dealloc.g.cs", sb.ToString());
                    sb.Clear();
                }
            });
        }

        private static void EmitDeallocMethod(StringBuilder sb, DeallocInfo entry)
        {
            sb.AppendLine($"        public static void Dealloc(this ref {entry.TypeName} self)");
            sb.AppendLine("        {");

            foreach (var f in entry.Fields)
                sb.AppendLine($"            self.{f}.Dealloc();");

            sb.AppendLine("        }");
        }
    }
}