using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ksi.Roslyn.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Ksi.Roslyn.ExplicitCopyTemplates;

namespace Ksi.Roslyn
{
    [Generator(LanguageNames.CSharp)]
    public class ExplicitCopyGenerator : IIncrementalGenerator
    {
        private class TypeInfo(string typeName)
        {
            public readonly string TypeName = typeName;
            public string? Namespace;
            public bool IsUnmanaged;
            public bool IsDealloc;
            public bool IsTemp;
            public string[] Usings = [];
            public readonly List<(string, bool)> Fields = new List<(string, bool)>();
        }

        public void Initialize(IncrementalGeneratorInitializationContext initCtx)
        {
            var query = initCtx.SyntaxProvider.CreateSyntaxProvider(
                predicate: (node, _) =>
                {
                    if (node is not StructDeclarationSyntax structDecl)
                        return false;

                    if (structDecl.AttributeLists.ContainsRefList())
                        return false;

                    return structDecl.AttributeLists.ContainsExplicitCopy();
                },
                transform: (ctx, ct) =>
                {
                    var c = (StructDeclarationSyntax)ctx.Node;

                    var t = ctx.SemanticModel.GetDeclaredSymbol((StructDeclarationSyntax)ctx.Node, ct);
                    var result = new TypeInfo(c.Identifier.ValueText);

                    if (t == null)
                        return result;

                    result.Namespace = t.ContainingNamespace.ToDisplayString();
                    result.IsUnmanaged = t.IsUnmanagedType;
                    result.IsDealloc = t.IsDealloc();
                    result.IsTemp = t.IsTemp();

                    var usings = new HashSet<string>();

                    foreach (var m in t.GetMembers())
                    {
                        if (m is not IFieldSymbol f || f.IsStatic)
                            continue;

                        if (f.Type is not INamedTypeSymbol ft)
                            continue;

                        var isExplicitCopy = ft.IsExplicitCopy();
                        result.Fields.Add((f.Name, isExplicitCopy));

                        if (!isExplicitCopy)
                            continue;

                        usings.Add(ft.ContainingNamespace.ToDisplayString());

                        if (ft.IsRefList() && ft.TryGetGenericArg(out var gt) && gt!.IsExplicitCopy())
                            usings.Add(gt!.ContainingNamespace.ToDisplayString());
                    }

                    usings.Remove(result.Namespace);
                    result.Usings = usings.ToArray();

                    Array.Sort(result.Usings);

                    return result;
                }
            );

            var collected = query.Collect();

            initCtx.RegisterSourceOutput(collected, (ctx, entries) =>
            {
                var sb = new StringBuilder();

                foreach (var entry in entries)
                {
                    sb.AppendLine("// Generated by Ksi.Roslyn");

                    if (entry.Namespace == null)
                    {
                        sb.AppendLine($"#error Failed to get a declared symbol for the `{entry.TypeName}`");
                    }
                    else
                    {
                        foreach (var u in entry.Usings)
                            sb.AppendLine($"using {u};");

                        sb.AppendLine();
                        sb.AppendLine($"namespace {entry.Namespace}");
                        sb.AppendLine("{");
                        sb.AppendLine($"    public static class {entry.TypeName}ExplicitCopy");
                        sb.AppendLine("    {");

                        EmitExplicitCopyMethods(sb, entry);

                        var template = entry.IsDealloc ? RefListExtensionsDealloc : RefListExtensions;
                        var kinds = RefListUtils.GetKinds(entry.IsUnmanaged, entry.IsTemp);
                        RefListUtils.Emit(kinds, template, sb, entry.TypeName);

                        sb.AppendLine("    }");
                        sb.AppendLine("}");
                    }

                    ctx.AddSource($"{entry.TypeName}ExplicitCopy.g.cs", sb.ToString());
                    sb.Clear();
                }
            });
        }

        private static void EmitExplicitCopyMethods(StringBuilder sb, TypeInfo entry)
        {
            sb.AppendLine($"        public static void CopyFrom(this ref {entry.TypeName} self, in {entry.TypeName} other)");
            sb.AppendLine("        {");

            foreach (var (fn, expCopy) in entry.Fields)
                sb.AppendLine(expCopy
                    ? $"            self.{fn}.CopyFrom(other.{fn});"
                    : $"            self.{fn} = other.{fn};");

            sb.AppendLine("        }");

            sb.AppendLine();

            sb.AppendLine($"        public static void CopyTo(this in {entry.TypeName} self, ref {entry.TypeName} other)");
            sb.AppendLine("        {");
            sb.AppendLine("            other.CopyFrom(self);");
            sb.AppendLine("        }");
        }
    }
}